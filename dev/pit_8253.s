.EXPORT init_pit_8253

# From devices.s
.IMPORT register_ports

# From obj/bits.s
.IMPORT bits

# From libxib.a
# TODO remove
.IMPORT print_num_radix
.IMPORT print_str

##########
pit_8253_ports:
    db  0x40, 0x00, channel_0_read, channel_0_write         # Channel 0 data
    db  0x41, 0x00, channel_1_read, channel_1_write         # Channel 1 data
    db  0x42, 0x00, channel_2_read, channel_2_write         # Channel 2 data
    db  0x43, 0x00, 0, mode_command_write                   # Mode/Command register

    db  -1, -1, -1, -1

##########
init_pit_8253:
.FRAME
    # Register I/O ports
    add pit_8253_ports, 0, [rb - 1]
    arb -1
    call register_ports

    ret 0
.ENDFRAME

# Channel 0:
# mode: 00h 00 00 000 0 latch, mode 0
# mode: 36h 00 11 011 0 lo+hi, mode 3
# write 0x0000
# read latch (for delay_15us)
# IRQ0 is generated by the rising edge of the Channel 0 output

##########
channel_0_read:
.FRAME port; value                      # returns value
    arb -1
    add channel_0_read_message, 0, [rb - 1]
    arb -1
    call print_str

    add [rb + value], 0, [rb - 1]
    add 16, 0, [rb - 2]
    add 2, 0, [rb - 3]
    arb -3
    call print_num_radix

    out 10

    arb 1
    ret 1

channel_0_read_message:
    db  "PIT CH0 RD: ", 0
.ENDFRAME

##########
channel_0_write:
.FRAME addr, value;
    add channel_0_write_message, 0, [rb - 1]
    arb -1
    call print_str

    add [rb + value], 0, [rb - 1]
    add 16, 0, [rb - 2]
    add 2, 0, [rb - 3]
    arb -3
    call print_num_radix

    out 10

    ret 2

channel_0_write_message:
    db  "PIT CH0 WR: ", 0
.ENDFRAME

# Channel 1:
# mode: 40h 01 00 000 0 latch, mode 0
# mode: 54h 01 01 010 0 lo, mode 2
# write 0x12 = 15ms
# no read on xt

##########
channel_1_read:
.FRAME port; value                      # returns value
    # Log access, which does not normally happen
    # TODO remove log
    arb -1
    add channel_1_read_message, 0, [rb - 1]
    arb -1
    call print_str
    out 10

    # Return a dummy value
    add 0xff, 0, [rb + value]

    arb 1
    ret 1

channel_1_read_message:
    db  "PIT CH1 RD", 0
.ENDFRAME

##########
channel_1_write:
.FRAME addr, value;
    # Log access
    # TODO remove log
    add channel_1_write_message, 0, [rb - 1]
    arb -1
    call print_str

    add [rb + value], 0, [rb - 1]
    add 16, 0, [rb - 2]
    add 2, 0, [rb - 3]
    arb -3
    call print_num_radix

    out 10

    ret 2

channel_1_write_message:
    db  "PIT CH1 WR: ", 0
.ENDFRAME

# Channel 2:
# mode: B6h 10 11 011 0 lo+hi, mode 3
# write:
#     pic_freq/400
#     pic_freq/554
#     pic_freq/277
#     pic_freq/370
#     pic_freq/277
#     pic_freq/415
#     1193 (~1000Hz)
#     16-bit only
# no read
# pic_freq 1193182
#
# PC Speaker
# bit 1 port 0x61: write controls speaker directly
# bit 0 port 0x61: write 1 = controlled by PIT channel 2 (controls 8253 gate input)
# bit 5 port 0x61: read output of PIT channel 2

##########
channel_2_read:
.FRAME port; value                      # returns value
    # Log access
    # TODO remove log
    arb -1
    add channel_2_read_message, 0, [rb - 1]
    arb -1
    call print_str

    out 10

    # Return a dummy value
    # TODO implement channel 2 properly
    add 0xff, 0, [rb + value]

    arb 1
    ret 1

channel_2_read_message:
    db  "PIT CH2 RD", 0
.ENDFRAME

##########
channel_2_write:
.FRAME addr, value;
    # Log access
    add channel_2_write_message, 0, [rb - 1]
    arb -1
    call print_str

    add [rb + value], 0, [rb - 1]
    add 16, 0, [rb - 2]
    add 2, 0, [rb - 3]
    arb -3
    call print_num_radix

    out 10

    # TODO implement channel 2 properly

    ret 2

channel_2_write_message:
    db  "PIT CH2 WR: ", 0
.ENDFRAME

# Mode notes:
#  - no need for BCD mode, readback
#  - need latch for delay_15us
#  - strictly need just modes 0 and 3; + 2 for DRAM refresh should not crash

##########
mode_command_write:
.FRAME addr, value;
    add mode_command_write_message, 0, [rb - 1]
    arb -1
    call print_str

    add [rb + value], 0, [rb - 1]
    add 16, 0, [rb - 2]
    add 2, 0, [rb - 3]
    arb -3
    call print_num_radix

    out 10

    ret 2

mode_command_write_message:
    db  "PIT M/C WR: ", 0
.ENDFRAME

.EOF
